-- Created by thibaut branlant 
-- 1 )
DROP TABLE PROMOTIONS CASCADE CONSTRAINTS;

CREATE TABLE PROMOTIONS (
    NUMERO VARCHAR(60) NOT NULL,
    NUMEROPRODUIT VARCHAR(60) NOT NULL,
    POURCENTAGE_REMISE FLOAT NOT NULL,
    DATE_DEBUT DATE NOT NULL,
    DATE_FIN DATE NOT NULL,
    ENCOURS INT NOT NULL,
    QUANTITESVENDUE INT NOT NULL,

    CONSTRAINT fk_numeroproduit
        FOREIGN KEY (NUMEROPRODUIT)
        REFERENCES PRODUITS(NUMERO),
    
    CONSTRAINT PK_PROMOTIONS PRIMARY KEY (NUMERO)
);

CREATE OR REPLACE PROCEDURE FIN_PROMO AS
    CURSOR cur IS
    SELECT DATE_FIN , ENCOURS FROM PROMOTIONS;
    res cur%ROWTYPE;
BEGIN
    OPEN cur;
    LOOP
        FETCH cur INTO res;
        EXIT WHEN cur%NOTFOUND;
        IF res.DATE_FIN >= sysdate  THEN
            UPDATE PROMOTIONS SET ENCOURS = 0; 
        END IF;
        DBMS_OUTPUT.PUT_LINE('Mise a jour de la promotion effectué');
    END LOOP;
    CLOSE cur;
END;
/

-- 2 )

CREATE OR REPLACE TRIGGER NOMPRENOM
BEFORE INSERT OR UPDATE ON EMPLOYE
FOR EACH ROW
BEGIN
    :NEW.NOM := UPPER(:NEW.NOM);
    :NEW.PRENOM := UPPER(:NEW.PRENOM);
END;
/
 
-- 3 )

CREATE OR REPLACE TRIGGER TRIGPROMO
BEFORE INSERT OR UPDATE ON PROMOTIONS
FOR EACH ROW
BEGIN
    IF  ( :NEW.DATE_DEBUT <= sysdate AND  :NEW.DATE_FIN >= sysdate) THEN
        IF :NEW.ENCOURS = 0 THEN
            :NEW.ENCOURS := 1;
        END IF;
    END IF;
END;
/

-- 4 )

CREATE OR REPLACE TRIGGER TRIGPROMODEPASSE
BEFORE INSERT OR UPDATE ON PROMOTIONS
FOR EACH ROW
BEGIN
    IF  ( :NEW.DATE_FIN <= sysdate) THEN
        raise_application_error(-20001, 'La date est depassé ');
    END IF;
END;
/

-- 5 ) 
-- on utilise la procedure n3 du tp3 
CREATE OR REPLACE TRIGGER TRIGQUANTITERCA
BEFORE UPDATE ON PRODUITS
FOR EACH ROW
BEGIN
    IF  ( :OLD.QUANTITESTOCKHYPER > :OLD.QUANTITESTOCKHYPER ) THEN
        Produit_Vendu( :NEW.NUMERO,:OLD.QUANTITESTOCKHYPER - :OLD.QUANTITESTOCKHYPER );
    END IF;
END;
/

-- 6 ) 
CREATE OR REPLACE TRIGGER TRIGPROMOVENTE
BEFORE UPDATE ON PRODUITS
FOR EACH ROW
BEGIN
    IF  ( :OLD.QUANTITESTOCKHYPER > :OLD.QUANTITESTOCKHYPER ) THEN
        Produit_Vendu( :NEW.NUMERO,:OLD.QUANTITESTOCKHYPER - :OLD.QUANTITESTOCKHYPER );
    END IF;
END;
/

-- 7 )

CREATE OR REPLACE TRIGGER INSNEWPROD
BEFORE INSERT ON PRODUITS
FOR EACH ROW 
BEGIN 
    IF ( SELECT * FROM PRODUITS WHERE :NEW.LIBELLE > 0 )THEN    
       UPDATE PRODUITS SET QUANTITESTOCKHYPER = QUANTITESTOCKHYPER + NEW.QUANTITESTOCKHYPER ;
       DBMS_OUTPUT.PUT_LINE('Quantite mise a jour ');
    END IF;